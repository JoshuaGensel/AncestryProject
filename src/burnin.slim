
initialize() {
	
	initializeSLiMModelType("nonWF");
	
	defineConstant("Ne", 5000);
	defineConstant("L_Y", 899999);
	defineConstant("L_M", 16569);
	defineConstant("L", L_M+L_Y);
	
	initializeTreeSeq();
	initializeSex("A");
	initializeMutationRate(0);
	// mtDNA-Marker
	initializeMutationType("m1", 1.0, "f", 0.0);		
	// YChrom-Marker
	initializeMutationType("m2", 1.0, "f", 0.0);		
	
	
	
	// mtDNA with mutation rate m1
	initializeGenomicElementType("g1", m1, 1.0);
	// Ychr with mutation rate m2
	initializeGenomicElementType("g2", m2, 1.0);		
	// mtDNA geneomic element
	initializeGenomicElement(g1, 0, L_M-1);	
	// Ychr geneomic element
	initializeGenomicElement(g2, L_M, L);	
	
	// no need for recombination			
	initializeRecombinationRate(0);
	
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
}


reproduction() {
	for (s in sim.subpopulations){
		for (i in seqLen(Ne)){
			mom = s.sampleIndividuals(1, sex = "F");
			dad = s.sampleIndividuals(1, sex = "M");
			s.addRecombinant(mom.genome1, NULL, NULL, dad.genome2, NULL, NULL);
		}
	}
	self.active = 0;
}

// force non-overlapping generations in nonWF
early() {
	sim.subpopulations.individuals[sim.subpopulations.individuals.age > 0].fitnessScaling = 0;
}


1 early(){
	sim.addSubpop("p0", Ne);
	// add marker mutation for mtDNA
	p0.individuals[p0.individuals.sex == "F"].genome1.addNewMutation(m1, 0.0, 0);
	// add marker mutation for Ychr
	p0.individuals[p0.individuals.sex == "M"].genome2.addNewMutation(m2, 0.0, L-1);
}

100000 late(){
	sim.treeSeqOutput("D:/Daten/programming_projects/AncestryProject/data/burn_in/burnin.trees");
}